
UART_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a8  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d5  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b3  00000000  00000000  00001b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  64:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDir>:
#include "DIO_interface.h"
#include "DIO_reg.h"
/************* Pin Direction Set Function *************/
void DIO_voidSetPinDir(u8 copy_u8port , u8 copy_u8pin ,u8 copy_u8dir){
	
	if(copy_u8dir == OUTPUT){
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_voidSetPinDir+0x6c>
		switch(copy_u8port){
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_voidSetPinDir+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_voidSetPinDir+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_voidSetPinDir+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_voidSetPinDir+0x56>
  7e:	08 95       	ret
			
			case DIO_PORTA : SET_BIT(DDRA_REG,copy_u8pin) ; break;
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_voidSetPinDir+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_voidSetPinDir+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
  94:	08 95       	ret
			case DIO_PORTB : SET_BIT(DDRB_REG,copy_u8pin) ; break;
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_voidSetPinDir+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_voidSetPinDir+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret
			case DIO_PORTC : SET_BIT(DDRC_REG,copy_u8pin) ; break;
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinDir+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinDir+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
  c0:	08 95       	ret
			case DIO_PORTD : SET_BIT(DDRD_REG,copy_u8pin) ; break;
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_voidSetPinDir+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_voidSetPinDir+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	08 95       	ret
			
		}
	}
	else if (copy_u8dir == INPUT){
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <DIO_voidSetPinDir+0xde>
		switch(copy_u8port){
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <DIO_voidSetPinDir+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_voidSetPinDir+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <DIO_voidSetPinDir+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_voidSetPinDir+0xc8>
  ea:	08 95       	ret
			
			case DIO_PORTA : CLR_BIT(DDRA_REG,copy_u8pin) ; break;
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_voidSetPinDir+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_voidSetPinDir+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
			case DIO_PORTB : CLR_BIT(DDRB_REG,copy_u8pin) ; break;
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_voidSetPinDir+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_voidSetPinDir+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
			case DIO_PORTC : CLR_BIT(DDRC_REG,copy_u8pin) ; break;
 11c:	24 b3       	in	r18, 0x14	; 20
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_voidSetPinDir+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_voidSetPinDir+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
			case DIO_PORTD : CLR_BIT(DDRD_REG,copy_u8pin) ; break;
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDir+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDir+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <DIO_voidSetPinVal>:
}

/************* Pin Value Set Function *************/

void DIO_voidSetPinVal(u8 copy_u8port , u8 copy_u8pin ,u8 copy_u8val){
	if(copy_u8val == HIGH){
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	a1 f5       	brne	.+104    	; 0x1b8 <DIO_voidSetPinVal+0x6c>
		
		switch(copy_u8port){
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	89 f0       	breq	.+34     	; 0x176 <DIO_voidSetPinVal+0x2a>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_voidSetPinVal+0x14>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c9 f0       	breq	.+50     	; 0x18c <DIO_voidSetPinVal+0x40>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	11 f1       	breq	.+68     	; 0x1a2 <DIO_voidSetPinVal+0x56>
 15e:	08 95       	ret
			case DIO_PORTA : SET_BIT(PORTA_REG,copy_u8pin) ; break;
 160:	2b b3       	in	r18, 0x1b	; 27
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_voidSetPinVal+0x20>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_voidSetPinVal+0x1c>
 170:	82 2b       	or	r24, r18
 172:	8b bb       	out	0x1b, r24	; 27
 174:	08 95       	ret
			case DIO_PORTB : SET_BIT(PORTB_REG,copy_u8pin) ; break; 
 176:	28 b3       	in	r18, 0x18	; 24
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_voidSetPinVal+0x36>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_voidSetPinVal+0x32>
 186:	82 2b       	or	r24, r18
 188:	88 bb       	out	0x18, r24	; 24
 18a:	08 95       	ret
			case DIO_PORTC : SET_BIT(PORTC_REG,copy_u8pin) ; break; 
 18c:	25 b3       	in	r18, 0x15	; 21
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinVal+0x4c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinVal+0x48>
 19c:	82 2b       	or	r24, r18
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	08 95       	ret
			case DIO_PORTD : SET_BIT(PORTD_REG,copy_u8pin) ; break;  
 1a2:	22 b3       	in	r18, 0x12	; 18
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_voidSetPinVal+0x62>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_voidSetPinVal+0x5e>
 1b2:	82 2b       	or	r24, r18
 1b4:	82 bb       	out	0x12, r24	; 18
 1b6:	08 95       	ret
		}
		
	}
	else if(copy_u8val == LOW){
 1b8:	41 11       	cpse	r20, r1
 1ba:	37 c0       	rjmp	.+110    	; 0x22a <DIO_voidSetPinVal+0xde>
		
		switch(copy_u8port){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 f0       	breq	.+36     	; 0x1e4 <DIO_voidSetPinVal+0x98>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <DIO_voidSetPinVal+0x80>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	d9 f0       	breq	.+54     	; 0x1fc <DIO_voidSetPinVal+0xb0>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	29 f1       	breq	.+74     	; 0x214 <DIO_voidSetPinVal+0xc8>
 1ca:	08 95       	ret
			case DIO_PORTA : CLR_BIT(PORTA_REG,copy_u8pin) ; break;
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_voidSetPinVal+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_voidSetPinVal+0x88>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	8b bb       	out	0x1b, r24	; 27
 1e2:	08 95       	ret
			case DIO_PORTB : CLR_BIT(PORTB_REG,copy_u8pin) ; break;
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinVal+0xa4>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinVal+0xa0>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	08 95       	ret
			case DIO_PORTC : CLR_BIT(PORTC_REG,copy_u8pin) ; break;
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinVal+0xbc>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinVal+0xb8>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
			case DIO_PORTD : CLR_BIT(PORTD_REG,copy_u8pin) ; break;
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinVal+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinVal+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret

0000022c <main>:
#include "DIO_interface.h"


int main(void)
{
    DIO_voidSetPinDir(DIO_PORTC,DIO_PIN2,OUTPUT);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	UART_voidInit();
 236:	0e 94 27 01 	call	0x24e	; 0x24e <UART_voidInit>
	u8 val=0;
	
    while (1) 
    {
		val=UART_u8RX();
 23a:	0e 94 32 01 	call	0x264	; 0x264 <UART_u8RX>
		if(val=='A'){
 23e:	81 34       	cpi	r24, 0x41	; 65
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0xe>
		
			DIO_voidSetPinVal(DIO_PORTC,DIO_PIN2,HIGH);
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_voidSetPinVal>
 24c:	f6 cf       	rjmp	.-20     	; 0x23a <main+0xe>

0000024e <UART_voidInit>:
	while (GET_BIT(UCSRA_REG,5)==0);
	
	
	
	
}
 24e:	86 e8       	ldi	r24, 0x86	; 134
 250:	80 bd       	out	0x20, r24	; 32
 252:	87 e6       	ldi	r24, 0x67	; 103
 254:	89 b9       	out	0x09, r24	; 9
 256:	8a b1       	in	r24, 0x0a	; 10
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	8a b9       	out	0x0a, r24	; 10
 25c:	8a b1       	in	r24, 0x0a	; 10
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	8a b9       	out	0x0a, r24	; 10
 262:	08 95       	ret

00000264 <UART_u8RX>:

u8 UART_u8RX(void){
	
	while(GET_BIT(UCSRA_REG,7)==0);
 264:	5f 9b       	sbis	0x0b, 7	; 11
 266:	fe cf       	rjmp	.-4      	; 0x264 <UART_u8RX>
	
	return UDR_REG;
 268:	8c b1       	in	r24, 0x0c	; 12
	
	
	
}
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
