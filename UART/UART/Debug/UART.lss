
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000694  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021f  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	UART_voidInit();
  6c:	0e 94 3c 00 	call	0x78	; 0x78 <UART_voidInit>
	UART_voidTX('B');
  70:	82 e4       	ldi	r24, 0x42	; 66
  72:	0e 94 47 00 	call	0x8e	; 0x8e <UART_voidTX>
  76:	ff cf       	rjmp	.-2      	; 0x76 <main+0xa>

00000078 <UART_voidInit>:
	 /****** Set bit 1 & bit 2 in UCSRC Reg to write 8 bit data ***/
	 
	 SET_BIT(temp,1);
	 SET_BIT(temp,2);
	
	UCSRC_REG=temp;
  78:	86 e8       	ldi	r24, 0x86	; 134
  7a:	80 bd       	out	0x20, r24	; 32
	

	
	/****** Set baud rate **********/
	UBRRL_REG=103;
  7c:	87 e6       	ldi	r24, 0x67	; 103
  7e:	89 b9       	out	0x09, r24	; 9
	
	/***** Enable tx & rx ************/
	SET_BIT(UCSRB_REG,3);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	88 60       	ori	r24, 0x08	; 8
  84:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB_REG,4);	
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	8a b9       	out	0x0a, r24	; 10
  8c:	08 95       	ret

0000008e <UART_voidTX>:
	
}

void UART_voidTX(u8 copy_u8data){
	
	UDR_REG=copy_u8data;
  8e:	8c b9       	out	0x0c, r24	; 12
	while (GET_BIT(UCSRA_REG,5)==0);
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <UART_voidTX+0x2>
	
	
	
	
}
  94:	08 95       	ret

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
